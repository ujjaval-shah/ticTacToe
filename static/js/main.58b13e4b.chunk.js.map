{"version":3,"sources":["WinLoss.jsx","Status.jsx","child.jsx","App.js","serviceWorker.js","index.js"],"names":["WinLoss","props","content","status","id","className","count","Status","need","params","Child","state","mark","win_list","player","reset","reloadGame","checkStatus","newMark","i","handleClick","pos","a","map","y","possibleWin","gameState","length","console","log","newState","setState","this","item","index","includes","onClick","Component","App","useState","gameID","setGameID","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.58b13e4b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction WinLoss(props) {\r\n\r\n    if (props.content.status === 0) {\r\n        return (<></>)\r\n    }\r\n\r\n    if (props.content.status === 1) {\r\n        return (\r\n            <div id=\"WinLossContain\" className=\"container\">\r\n                <p id=\"win_loss\">\r\n                    {`Player ${props.content.count % 2 + 1} has won the game.`}\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (props.content.status === 2) {\r\n        return (\r\n            <div id=\"WinLossContain\" className=\"container\">\r\n                <p id=\"win_loss container\">\r\n                    {`Oops... Match Draw.`}\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default WinLoss;","import React from 'react';\r\n\r\nfunction Status(props) {\r\n\r\n    if (props.need) {\r\n\r\n        if (!(props.params.status)) {\r\n            return (\r\n                <div className=\"status\"> TURN </div>\r\n            )\r\n        }\r\n        if (props.params.status === 1) {\r\n            return (\r\n                <div className=\"status status-1\"> WIN </div>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    return (<></>)\r\n}\r\n\r\nexport default Status;","import React, { Component } from 'react'\r\nimport WinLoss from './WinLoss'\r\nimport Status from './Status'\r\n\r\nclass Child extends Component {\r\n    state = { mark: [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], status: 0, count: 0, win_list: [] }\r\n    player = ['X', 'O']\r\n\r\n    reset = () => {\r\n        this.props.reloadGame()\r\n    }\r\n\r\n    checkStatus = (newMark) => {\r\n        for (let i = 0; i < 3; i++) { if (newMark[0 + 3 * i] === 'X' && newMark[1 + 3 * i] === 'X' && newMark[2 + 3 * i] === 'X') return [0 + 3 * i, 1 + 3 * i, 2 + 3 * i]; }\r\n        for (let i = 0; i < 3; i++) { if (newMark[0 + 3 * i] === 'O' && newMark[1 + 3 * i] === 'O' && newMark[2 + 3 * i] === 'O') return [0 + 3 * i, 1 + 3 * i, 2 + 3 * i]; }\r\n        for (let i = 0; i < 3; i++) { if (newMark[0 + i] === 'X' && newMark[3 + i] === 'X' && newMark[6 + i] === 'X') return [0 + i, 3 + i, 6 + i]; }\r\n        for (let i = 0; i < 3; i++) { if (newMark[0 + i] === 'O' && newMark[3 + i] === 'O' && newMark[6 + i] === 'O') return [0 + i, 3 + i, 6 + i]; }\r\n        if (newMark[0] === 'X' && newMark[4] === 'X' && newMark[8] === 'X') return [0, 4, 8];\r\n        if (newMark[0] === 'O' && newMark[4] === 'O' && newMark[8] === 'O') return [0, 4, 8];\r\n        if (newMark[2] === 'X' && newMark[4] === 'X' && newMark[6] === 'X') return [2, 4, 6];\r\n        if (newMark[2] === 'O' && newMark[4] === 'O' && newMark[6] === 'O') return [2, 4, 6];\r\n        return [];\r\n    }\r\n\r\n    handleClick = async (pos) => {\r\n        if (this.state.mark[pos] !== ' ' || this.state.status !== 0) return\r\n        let newMark = this.state.mark.map(y => y)\r\n        newMark[pos] = this.player[(this.state.count) % 2]\r\n        let possibleWin = this.checkStatus(newMark)\r\n        let gameState = (possibleWin.length) ? 1 : 0;\r\n        console.log(possibleWin, gameState)\r\n        let newState = await { ...this.state.count, mark: newMark, status: gameState, win_list: possibleWin }\r\n        this.setState(newState)\r\n        if (this.state.status > 0) { return; }\r\n        this.setState({ ...this.state, count: this.state.count + 1 })\r\n        if (this.state.count === 9) this.setState({ ...this.state, status: 2 })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n\r\n                <div className=\"game container\">\r\n\r\n                    {this.state.mark.map((item, index) => (\r\n                        <div className={`grid-cell ${this.state.win_list.includes(index) ? \"win-cell\" : \"normal-cell\"}`} onClick={() => this.handleClick(index)}\r\n                        > <div className=\"mark\"> {item} </div> </div>\r\n                    ))}\r\n\r\n                </div>\r\n\r\n                <div className=\"info container\">\r\n                    <div\r\n                        className={`player ${(!(this.state.count % 2) && !(this.state.status)) || (this.state.status === 1 && !(this.state.count % 2)) ? \"active\" : \"inactive\"}`}\r\n                    > <div className=\"which_player\"> P1 - X </div>\r\n\r\n                        <Status need={!(this.state.count % 2)} params={\r\n                            { status: this.state.status }\r\n                        } />\r\n                    </div>\r\n                    <div\r\n                        className={`player ${((this.state.count % 2) && !(this.state.status)) || (this.state.status === 1 && (this.state.count % 2)) ? \"active\" : \"inactive\"}`}\r\n                    > <div className=\"which_player\"> P2 - 0</div>\r\n\r\n                        <Status need={(this.state.count % 2)} params={\r\n                            { status: this.state.status }\r\n                        } />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <WinLoss content={\r\n                    {\r\n                        status: this.state.status,\r\n                        count: this.state.count\r\n                    }\r\n                } />\r\n\r\n                <div id=\"reload\" className=\"container\" onClick={this.reset}>\r\n                    RELOAD\r\n                </div>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Child;","import React, { useState } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Child from './child';\n\nfunction App() {\n\n\tconst [gameID, setGameID] = useState(0);\n\n\tconst reload = () => {\n\t\tsetGameID(gameID + 1)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<p id=\"tictactoe\"> TIC - TAC - TOE </p>\n\t\t\t<Child key={gameID} reloadGame={reload} />\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  (<>\n    < App />\n  </>),\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}